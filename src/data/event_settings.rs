use serde::Deserialize;


#[allow(non_snake_case)]
#[derive(Clone, Debug, Deserialize, PartialEq, Eq)]
pub struct DeviceEventSettings {
    pub enabled: String,
    pub meter: u32,
    pub timestamp: String,
    pub pre_en_t: String,
    pub post_en_t: String,
    pub pre_rec_t: String,
    pub post_rec_t: String,
    pub A: String,
    pub B: String,
    pub C: String,
    pub D: String,
    pub E: String,
    pub F: String,
    pub G: String,
    pub H: String,
    pub I: String,
    pub logic: String,
    pub d1: String,
    pub d2: String,
    pub d3: String,
    pub d4: String,
    pub d5: String,
    pub d6: String,
    pub d7: String,
    pub d8: String,
    pub d9: String,
    pub d10: String,
    pub d11: String,
    pub d12: String,
    pub d13: String,
    pub d14: String,
    pub d15: String,
    pub d16: String,
    pub d17: String,
    pub d18: String,
    pub d19: String,
    pub d20: String,
    pub d21: String,
    pub d22: String,
    pub d23: String,
    pub d24: String,
    pub d25: String,
    pub d26: String,
    pub d27: String,
    pub d28: String,
}


impl DeviceEventSettings {
    pub fn to_header_record() -> Vec<String> {
        vec![
            "enabled".to_string(),
            "meter".to_string(),
            "timestamp".to_string(),
            "pre_en_t".to_string(),
            "post_en_t".to_string(),
            "pre_rec_t".to_string(),
            "post_rec_t".to_string(),
            "A".to_string(),
            "B".to_string(),
            "C".to_string(),
            "D".to_string(),
            "E".to_string(),
            "F".to_string(),
            "G".to_string(),
            "H".to_string(),
            "I".to_string(),
            "logic".to_string(),
            "d1".to_string(),
            "d2".to_string(),
            "d3".to_string(),
            "d4".to_string(),
            "d5".to_string(),
            "d6".to_string(),
            "d7".to_string(),
            "d8".to_string(),
            "d9".to_string(),
            "d10".to_string(),
            "d11".to_string(),
            "d12".to_string(),
            "d13".to_string(),
            "d14".to_string(),
            "d15".to_string(),
            "d16".to_string(),
            "d17".to_string(),
            "d18".to_string(),
            "d19".to_string(),
            "d20".to_string(),
            "d21".to_string(),
            "d22".to_string(),
            "d23".to_string(),
            "d24".to_string(),
            "d25".to_string(),
            "d26".to_string(),
            "d27".to_string(),
            "d28".to_string(),
        ]
    }

    pub fn to_record(&self) -> Vec<String> {
        vec![
            self.enabled.clone(),
            self.meter.to_string(),
            self.timestamp.clone(),
            self.pre_en_t.clone(),
            self.post_en_t.clone(),
            self.pre_rec_t.clone(),
            self.post_rec_t.clone(),
            self.A.clone(),
            self.B.clone(),
            self.C.clone(),
            self.D.clone(),
            self.E.clone(),
            self.F.clone(),
            self.G.clone(),
            self.H.clone(),
            self.I.clone(),
            self.logic.clone(),
            self.d1.clone(),
            self.d2.clone(),
            self.d3.clone(),
            self.d4.clone(),
            self.d5.clone(),
            self.d6.clone(),
            self.d7.clone(),
            self.d8.clone(),
            self.d9.clone(),
            self.d10.clone(),
            self.d11.clone(),
            self.d12.clone(),
            self.d13.clone(),
            self.d14.clone(),
            self.d15.clone(),
            self.d16.clone(),
            self.d17.clone(),
            self.d18.clone(),
            self.d19.clone(),
            self.d20.clone(),
            self.d21.clone(),
            self.d22.clone(),
            self.d23.clone(),
            self.d24.clone(),
            self.d25.clone(),
            self.d26.clone(),
            self.d27.clone(),
            self.d28.clone(),
        ]
    }

    pub fn measurement_types(&self) -> Vec<String> {
        vec![
            self.d1.clone(),
            self.d2.clone(),
            self.d3.clone(),
            self.d4.clone(),
            self.d5.clone(),
            self.d6.clone(),
            self.d7.clone(),
            self.d8.clone(),
            self.d9.clone(),
            self.d10.clone(),
            self.d11.clone(),
            self.d12.clone(),
            self.d13.clone(),
            self.d14.clone(),
            self.d15.clone(),
            self.d16.clone(),
            self.d17.clone(),
            self.d18.clone(),
            self.d19.clone(),
            self.d20.clone(),
            self.d21.clone(),
            self.d22.clone(),
            self.d23.clone(),
            self.d24.clone(),
            self.d25.clone(),
            self.d26.clone(),
            self.d27.clone(),
            self.d28.clone(),
        ]
    }
}
